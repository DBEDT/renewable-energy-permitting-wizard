#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HawaiiDBEDT.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HawaiiDBEDT")]
	public partial class DBEDT_EvaluationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPermitDependencyType(PermitDependencyType instance);
    partial void UpdatePermitDependencyType(PermitDependencyType instance);
    partial void DeletePermitDependencyType(PermitDependencyType instance);
    partial void InsertPermitDependency(PermitDependency instance);
    partial void UpdatePermitDependency(PermitDependency instance);
    partial void DeletePermitDependency(PermitDependency instance);
    partial void InsertCounty(County instance);
    partial void UpdateCounty(County instance);
    partial void DeleteCounty(County instance);
    partial void InsertPermitSet(PermitSet instance);
    partial void UpdatePermitSet(PermitSet instance);
    partial void DeletePermitSet(PermitSet instance);
    partial void InsertPermitSetPermit(PermitSetPermit instance);
    partial void UpdatePermitSetPermit(PermitSetPermit instance);
    partial void DeletePermitSetPermit(PermitSetPermit instance);
    partial void InsertPermitType(PermitType instance);
    partial void UpdatePermitType(PermitType instance);
    partial void DeletePermitType(PermitType instance);
    partial void InsertResponsePermitSet(ResponsePermitSet instance);
    partial void UpdateResponsePermitSet(ResponsePermitSet instance);
    partial void DeleteResponsePermitSet(ResponsePermitSet instance);
    partial void InsertQuestionSet(QuestionSet instance);
    partial void UpdateQuestionSet(QuestionSet instance);
    partial void DeleteQuestionSet(QuestionSet instance);
    partial void InsertQuestionSetQuestion(QuestionSetQuestion instance);
    partial void UpdateQuestionSetQuestion(QuestionSetQuestion instance);
    partial void DeleteQuestionSetQuestion(QuestionSetQuestion instance);
    partial void InsertTechnologyPermitSet(TechnologyPermitSet instance);
    partial void UpdateTechnologyPermitSet(TechnologyPermitSet instance);
    partial void DeleteTechnologyPermitSet(TechnologyPermitSet instance);
    partial void InsertLocationPermitSet(LocationPermitSet instance);
    partial void UpdateLocationPermitSet(LocationPermitSet instance);
    partial void DeleteLocationPermitSet(LocationPermitSet instance);
    partial void InsertTechnology(Technology instance);
    partial void UpdateTechnology(Technology instance);
    partial void DeleteTechnology(Technology instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertPermit(Permit instance);
    partial void UpdatePermit(Permit instance);
    partial void DeletePermit(Permit instance);
    partial void InsertQuestionSetLocation(QuestionSetLocation instance);
    partial void UpdateQuestionSetLocation(QuestionSetLocation instance);
    partial void DeleteQuestionSetLocation(QuestionSetLocation instance);
    partial void InsertQuestionType(QuestionType instance);
    partial void UpdateQuestionType(QuestionType instance);
    partial void DeleteQuestionType(QuestionType instance);
    partial void InsertPreEvaluationResponsePermitSet(PreEvaluationResponsePermitSet instance);
    partial void UpdatePreEvaluationResponsePermitSet(PreEvaluationResponsePermitSet instance);
    partial void DeletePreEvaluationResponsePermitSet(PreEvaluationResponsePermitSet instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserLoginHistory(UserLoginHistory instance);
    partial void UpdateUserLoginHistory(UserLoginHistory instance);
    partial void DeleteUserLoginHistory(UserLoginHistory instance);
    partial void InsertEvaluationPreEvalResponse(EvaluationPreEvalResponse instance);
    partial void UpdateEvaluationPreEvalResponse(EvaluationPreEvalResponse instance);
    partial void DeleteEvaluationPreEvalResponse(EvaluationPreEvalResponse instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertResponse(Response instance);
    partial void UpdateResponse(Response instance);
    partial void DeleteResponse(Response instance);
    partial void InsertPreEvaluationQuestion(PreEvaluationQuestion instance);
    partial void UpdatePreEvaluationQuestion(PreEvaluationQuestion instance);
    partial void DeletePreEvaluationQuestion(PreEvaluationQuestion instance);
    partial void InsertPreEvaluationSubQuestion(PreEvaluationSubQuestion instance);
    partial void UpdatePreEvaluationSubQuestion(PreEvaluationSubQuestion instance);
    partial void DeletePreEvaluationSubQuestion(PreEvaluationSubQuestion instance);
    partial void InsertPreEvaluationResponse(PreEvaluationResponse instance);
    partial void UpdatePreEvaluationResponse(PreEvaluationResponse instance);
    partial void DeletePreEvaluationResponse(PreEvaluationResponse instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertEvaluationResponse(EvaluationResponse instance);
    partial void UpdateEvaluationResponse(EvaluationResponse instance);
    partial void DeleteEvaluationResponse(EvaluationResponse instance);
    #endregion
		
		public DBEDT_EvaluationDataContext() : 
				base(global::HawaiiDBEDT.Data.Properties.Settings.Default.HawaiiDBEDTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBEDT_EvaluationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEDT_EvaluationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEDT_EvaluationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEDT_EvaluationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PermitDependencyType> PermitDependencyTypes
		{
			get
			{
				return this.GetTable<PermitDependencyType>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyQuestion> TechnologyQuestions
		{
			get
			{
				return this.GetTable<TechnologyQuestion>();
			}
		}
		
		public System.Data.Linq.Table<PermitDependency> PermitDependencies
		{
			get
			{
				return this.GetTable<PermitDependency>();
			}
		}
		
		public System.Data.Linq.Table<County> Counties
		{
			get
			{
				return this.GetTable<County>();
			}
		}
		
		public System.Data.Linq.Table<PermitSet> PermitSets
		{
			get
			{
				return this.GetTable<PermitSet>();
			}
		}
		
		public System.Data.Linq.Table<PermitSetPermit> PermitSetPermits
		{
			get
			{
				return this.GetTable<PermitSetPermit>();
			}
		}
		
		public System.Data.Linq.Table<PermitType> PermitTypes
		{
			get
			{
				return this.GetTable<PermitType>();
			}
		}
		
		public System.Data.Linq.Table<ResponsePermitSet> ResponsePermitSets
		{
			get
			{
				return this.GetTable<ResponsePermitSet>();
			}
		}
		
		public System.Data.Linq.Table<QuestionSet> QuestionSets
		{
			get
			{
				return this.GetTable<QuestionSet>();
			}
		}
		
		public System.Data.Linq.Table<QuestionSetQuestion> QuestionSetQuestions
		{
			get
			{
				return this.GetTable<QuestionSetQuestion>();
			}
		}
		
		public System.Data.Linq.Table<TechnologyPermitSet> TechnologyPermitSets
		{
			get
			{
				return this.GetTable<TechnologyPermitSet>();
			}
		}
		
		public System.Data.Linq.Table<LocationPermitSet> LocationPermitSets
		{
			get
			{
				return this.GetTable<LocationPermitSet>();
			}
		}
		
		public System.Data.Linq.Table<Technology> Technologies
		{
			get
			{
				return this.GetTable<Technology>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Permit> Permits
		{
			get
			{
				return this.GetTable<Permit>();
			}
		}
		
		public System.Data.Linq.Table<QuestionSetLocation> QuestionSetLocations
		{
			get
			{
				return this.GetTable<QuestionSetLocation>();
			}
		}
		
		public System.Data.Linq.Table<QuestionType> QuestionTypes
		{
			get
			{
				return this.GetTable<QuestionType>();
			}
		}
		
		public System.Data.Linq.Table<PreEvaluationResponsePermitSet> PreEvaluationResponsePermitSets
		{
			get
			{
				return this.GetTable<PreEvaluationResponsePermitSet>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserLoginHistory> UserLoginHistories
		{
			get
			{
				return this.GetTable<UserLoginHistory>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationPreEvalResponse> EvaluationPreEvalResponses
		{
			get
			{
				return this.GetTable<EvaluationPreEvalResponse>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Response> Responses
		{
			get
			{
				return this.GetTable<Response>();
			}
		}
		
		public System.Data.Linq.Table<PreEvaluationQuestion> PreEvaluationQuestions
		{
			get
			{
				return this.GetTable<PreEvaluationQuestion>();
			}
		}
		
		public System.Data.Linq.Table<PreEvaluationSubQuestion> PreEvaluationSubQuestions
		{
			get
			{
				return this.GetTable<PreEvaluationSubQuestion>();
			}
		}
		
		public System.Data.Linq.Table<PreEvaluationResponse> PreEvaluationResponses
		{
			get
			{
				return this.GetTable<PreEvaluationResponse>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationResponse> EvaluationResponses
		{
			get
			{
				return this.GetTable<EvaluationResponse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermitDependencyType")]
	public partial class PermitDependencyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitDependencyTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<PermitDependency> _PermitDependencies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PermitDependencyType()
		{
			this._PermitDependencies = new EntitySet<PermitDependency>(new Action<PermitDependency>(this.attach_PermitDependencies), new Action<PermitDependency>(this.detach_PermitDependencies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PermitDependencyTypeID", Storage="_PermitDependencyTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._PermitDependencyTypeID;
			}
			set
			{
				if ((this._PermitDependencyTypeID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._PermitDependencyTypeID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitDependencyType_PermitDependency", Storage="_PermitDependencies", ThisKey="ID", OtherKey="PermitDependencyTypeID")]
		public EntitySet<PermitDependency> PermitDependencies
		{
			get
			{
				return this._PermitDependencies;
			}
			set
			{
				this._PermitDependencies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermitDependencies(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.PermitDependencyType = this;
		}
		
		private void detach_PermitDependencies(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.PermitDependencyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyQuestions")]
	public partial class TechnologyQuestion
	{
		
		private int _QuestionID;
		
		private int _TechnologyID;
		
		private byte _PageNo;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		public TechnologyQuestion()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					this._TechnologyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageNo", DbType="TinyInt NOT NULL")]
		public byte PageNo
		{
			get
			{
				return this._PageNo;
			}
			set
			{
				if ((this._PageNo != value))
				{
					this._PageNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this._DateCreated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this._DateModified = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermitDependency")]
	public partial class PermitDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitID;
		
		private int _DependentPermitID;
		
		private int _PermitDependencyTypeID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PermitDependencyType> _PermitDependencyType;
		
		private EntityRef<Permit> _Permit;
		
		private EntityRef<Permit> _Permit1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermitIDChanging(int value);
    partial void OnPermitIDChanged();
    partial void OnDependentPermitIDChanging(int value);
    partial void OnDependentPermitIDChanged();
    partial void OnPermitDependencyTypeIDChanging(int value);
    partial void OnPermitDependencyTypeIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PermitDependency()
		{
			this._PermitDependencyType = default(EntityRef<PermitDependencyType>);
			this._Permit = default(EntityRef<Permit>);
			this._Permit1 = default(EntityRef<Permit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitID
		{
			get
			{
				return this._PermitID;
			}
			set
			{
				if ((this._PermitID != value))
				{
					if (this._Permit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitIDChanging(value);
					this.SendPropertyChanging();
					this._PermitID = value;
					this.SendPropertyChanged("PermitID");
					this.OnPermitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependentPermitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DependentPermitID
		{
			get
			{
				return this._DependentPermitID;
			}
			set
			{
				if ((this._DependentPermitID != value))
				{
					if (this._Permit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependentPermitIDChanging(value);
					this.SendPropertyChanging();
					this._DependentPermitID = value;
					this.SendPropertyChanged("DependentPermitID");
					this.OnDependentPermitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitDependencyTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitDependencyTypeID
		{
			get
			{
				return this._PermitDependencyTypeID;
			}
			set
			{
				if ((this._PermitDependencyTypeID != value))
				{
					if (this._PermitDependencyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitDependencyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PermitDependencyTypeID = value;
					this.SendPropertyChanged("PermitDependencyTypeID");
					this.OnPermitDependencyTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitDependencyType_PermitDependency", Storage="_PermitDependencyType", ThisKey="PermitDependencyTypeID", OtherKey="ID", IsForeignKey=true)]
		public PermitDependencyType PermitDependencyType
		{
			get
			{
				return this._PermitDependencyType.Entity;
			}
			set
			{
				PermitDependencyType previousValue = this._PermitDependencyType.Entity;
				if (((previousValue != value) 
							|| (this._PermitDependencyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitDependencyType.Entity = null;
						previousValue.PermitDependencies.Remove(this);
					}
					this._PermitDependencyType.Entity = value;
					if ((value != null))
					{
						value.PermitDependencies.Add(this);
						this._PermitDependencyTypeID = value.ID;
					}
					else
					{
						this._PermitDependencyTypeID = default(int);
					}
					this.SendPropertyChanged("PermitDependencyType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitDependency", Storage="_Permit", ThisKey="PermitID", OtherKey="ID", IsForeignKey=true)]
		public Permit Permit
		{
			get
			{
				return this._Permit.Entity;
			}
			set
			{
				Permit previousValue = this._Permit.Entity;
				if (((previousValue != value) 
							|| (this._Permit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permit.Entity = null;
						previousValue.PermitDependencies.Remove(this);
					}
					this._Permit.Entity = value;
					if ((value != null))
					{
						value.PermitDependencies.Add(this);
						this._PermitID = value.ID;
					}
					else
					{
						this._PermitID = default(int);
					}
					this.SendPropertyChanged("Permit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitDependency1", Storage="_Permit1", ThisKey="DependentPermitID", OtherKey="ID", IsForeignKey=true)]
		public Permit Permit1
		{
			get
			{
				return this._Permit1.Entity;
			}
			set
			{
				Permit previousValue = this._Permit1.Entity;
				if (((previousValue != value) 
							|| (this._Permit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permit1.Entity = null;
						previousValue.PermitDependencies1.Remove(this);
					}
					this._Permit1.Entity = value;
					if ((value != null))
					{
						value.PermitDependencies1.Add(this);
						this._DependentPermitID = value.ID;
					}
					else
					{
						this._DependentPermitID = default(int);
					}
					this.SendPropertyChanged("Permit1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.County")]
	public partial class County : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<PermitSet> _PermitSets;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<Permit> _Permits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public County()
		{
			this._PermitSets = new EntitySet<PermitSet>(new Action<PermitSet>(this.attach_PermitSets), new Action<PermitSet>(this.detach_PermitSets));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Permits = new EntitySet<Permit>(new Action<Permit>(this.attach_Permits), new Action<Permit>(this.detach_Permits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CountyID", Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_PermitSet", Storage="_PermitSets", ThisKey="ID", OtherKey="CountyID")]
		public EntitySet<PermitSet> PermitSets
		{
			get
			{
				return this._PermitSets;
			}
			set
			{
				this._PermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Location", Storage="_Locations", ThisKey="ID", OtherKey="CountyID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Permit", Storage="_Permits", ThisKey="ID", OtherKey="CountyID")]
		public EntitySet<Permit> Permits
		{
			get
			{
				return this._Permits;
			}
			set
			{
				this._Permits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermitSets(PermitSet entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_PermitSets(PermitSet entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
		
		private void attach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.County = this;
		}
		
		private void detach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.County = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermitSet")]
	public partial class PermitSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _CountyID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<PermitSetPermit> _PermitSetPermits;
		
		private EntitySet<ResponsePermitSet> _ResponsePermitSets;
		
		private EntitySet<TechnologyPermitSet> _TechnologyPermitSets;
		
		private EntitySet<LocationPermitSet> _LocationPermitSets;
		
		private EntitySet<PreEvaluationResponsePermitSet> _PreEvaluationResponsePermitSets;
		
		private EntityRef<County> _County;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PermitSet()
		{
			this._PermitSetPermits = new EntitySet<PermitSetPermit>(new Action<PermitSetPermit>(this.attach_PermitSetPermits), new Action<PermitSetPermit>(this.detach_PermitSetPermits));
			this._ResponsePermitSets = new EntitySet<ResponsePermitSet>(new Action<ResponsePermitSet>(this.attach_ResponsePermitSets), new Action<ResponsePermitSet>(this.detach_ResponsePermitSets));
			this._TechnologyPermitSets = new EntitySet<TechnologyPermitSet>(new Action<TechnologyPermitSet>(this.attach_TechnologyPermitSets), new Action<TechnologyPermitSet>(this.detach_TechnologyPermitSets));
			this._LocationPermitSets = new EntitySet<LocationPermitSet>(new Action<LocationPermitSet>(this.attach_LocationPermitSets), new Action<LocationPermitSet>(this.detach_LocationPermitSets));
			this._PreEvaluationResponsePermitSets = new EntitySet<PreEvaluationResponsePermitSet>(new Action<PreEvaluationResponsePermitSet>(this.attach_PreEvaluationResponsePermitSets), new Action<PreEvaluationResponsePermitSet>(this.detach_PreEvaluationResponsePermitSets));
			this._County = default(EntityRef<County>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PermitSetID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_PermitSetPermit", Storage="_PermitSetPermits", ThisKey="ID", OtherKey="PermitSetID")]
		public EntitySet<PermitSetPermit> PermitSetPermits
		{
			get
			{
				return this._PermitSetPermits;
			}
			set
			{
				this._PermitSetPermits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_ResponsePermitSet", Storage="_ResponsePermitSets", ThisKey="ID", OtherKey="PermitSetID")]
		public EntitySet<ResponsePermitSet> ResponsePermitSets
		{
			get
			{
				return this._ResponsePermitSets;
			}
			set
			{
				this._ResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_TechnologyPermitSet", Storage="_TechnologyPermitSets", ThisKey="ID", OtherKey="PermitSetID")]
		public EntitySet<TechnologyPermitSet> TechnologyPermitSets
		{
			get
			{
				return this._TechnologyPermitSets;
			}
			set
			{
				this._TechnologyPermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_LocationPermitSet", Storage="_LocationPermitSets", ThisKey="ID", OtherKey="PermitSetID")]
		public EntitySet<LocationPermitSet> LocationPermitSets
		{
			get
			{
				return this._LocationPermitSets;
			}
			set
			{
				this._LocationPermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_PreEvaluationResponsePermitSet", Storage="_PreEvaluationResponsePermitSets", ThisKey="ID", OtherKey="PermitSetID")]
		public EntitySet<PreEvaluationResponsePermitSet> PreEvaluationResponsePermitSets
		{
			get
			{
				return this._PreEvaluationResponsePermitSets;
			}
			set
			{
				this._PreEvaluationResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_PermitSet", Storage="_County", ThisKey="CountyID", OtherKey="ID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.PermitSets.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.PermitSets.Add(this);
						this._CountyID = value.ID;
					}
					else
					{
						this._CountyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermitSetPermits(PermitSetPermit entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = this;
		}
		
		private void detach_PermitSetPermits(PermitSetPermit entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = null;
		}
		
		private void attach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = this;
		}
		
		private void detach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = null;
		}
		
		private void attach_TechnologyPermitSets(TechnologyPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = this;
		}
		
		private void detach_TechnologyPermitSets(TechnologyPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = null;
		}
		
		private void attach_LocationPermitSets(LocationPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = this;
		}
		
		private void detach_LocationPermitSets(LocationPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = null;
		}
		
		private void attach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = this;
		}
		
		private void detach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PermitSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermitSetPermits")]
	public partial class PermitSetPermit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermitSetID;
		
		private int _PermitID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PermitSet> _PermitSet;
		
		private EntityRef<Permit> _Permit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermitSetIDChanging(int value);
    partial void OnPermitSetIDChanged();
    partial void OnPermitIDChanging(int value);
    partial void OnPermitIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PermitSetPermit()
		{
			this._PermitSet = default(EntityRef<PermitSet>);
			this._Permit = default(EntityRef<Permit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitSetID
		{
			get
			{
				return this._PermitSetID;
			}
			set
			{
				if ((this._PermitSetID != value))
				{
					if (this._PermitSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitSetIDChanging(value);
					this.SendPropertyChanging();
					this._PermitSetID = value;
					this.SendPropertyChanged("PermitSetID");
					this.OnPermitSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitID
		{
			get
			{
				return this._PermitID;
			}
			set
			{
				if ((this._PermitID != value))
				{
					if (this._Permit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitIDChanging(value);
					this.SendPropertyChanging();
					this._PermitID = value;
					this.SendPropertyChanged("PermitID");
					this.OnPermitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_PermitSetPermit", Storage="_PermitSet", ThisKey="PermitSetID", OtherKey="ID", IsForeignKey=true)]
		public PermitSet PermitSet
		{
			get
			{
				return this._PermitSet.Entity;
			}
			set
			{
				PermitSet previousValue = this._PermitSet.Entity;
				if (((previousValue != value) 
							|| (this._PermitSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitSet.Entity = null;
						previousValue.PermitSetPermits.Remove(this);
					}
					this._PermitSet.Entity = value;
					if ((value != null))
					{
						value.PermitSetPermits.Add(this);
						this._PermitSetID = value.ID;
					}
					else
					{
						this._PermitSetID = default(int);
					}
					this.SendPropertyChanged("PermitSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitSetPermit", Storage="_Permit", ThisKey="PermitID", OtherKey="ID", IsForeignKey=true)]
		public Permit Permit
		{
			get
			{
				return this._Permit.Entity;
			}
			set
			{
				Permit previousValue = this._Permit.Entity;
				if (((previousValue != value) 
							|| (this._Permit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permit.Entity = null;
						previousValue.PermitSetPermits.Remove(this);
					}
					this._Permit.Entity = value;
					if ((value != null))
					{
						value.PermitSetPermits.Add(this);
						this._PermitID = value.ID;
					}
					else
					{
						this._PermitID = default(int);
					}
					this.SendPropertyChanged("Permit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermitType")]
	public partial class PermitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<Permit> _Permits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PermitType()
		{
			this._Permits = new EntitySet<Permit>(new Action<Permit>(this.attach_Permits), new Action<Permit>(this.detach_Permits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PermitTypeID", Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitType_Permit", Storage="_Permits", ThisKey="ID", OtherKey="PermitTypeID")]
		public EntitySet<Permit> Permits
		{
			get
			{
				return this._Permits;
			}
			set
			{
				this._Permits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.PermitType = this;
		}
		
		private void detach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.PermitType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResponsePermitSet")]
	public partial class ResponsePermitSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResponseID;
		
		private int _PermitSetID;
		
		private int _LocationID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PermitSet> _PermitSet;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Response> _Response;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponseIDChanging(int value);
    partial void OnResponseIDChanged();
    partial void OnPermitSetIDChanging(int value);
    partial void OnPermitSetIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public ResponsePermitSet()
		{
			this._PermitSet = default(EntityRef<PermitSet>);
			this._Location = default(EntityRef<Location>);
			this._Response = default(EntityRef<Response>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResponseID
		{
			get
			{
				return this._ResponseID;
			}
			set
			{
				if ((this._ResponseID != value))
				{
					if (this._Response.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponseIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseID = value;
					this.SendPropertyChanged("ResponseID");
					this.OnResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitSetID
		{
			get
			{
				return this._PermitSetID;
			}
			set
			{
				if ((this._PermitSetID != value))
				{
					if (this._PermitSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitSetIDChanging(value);
					this.SendPropertyChanging();
					this._PermitSetID = value;
					this.SendPropertyChanged("PermitSetID");
					this.OnPermitSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_ResponsePermitSet", Storage="_PermitSet", ThisKey="PermitSetID", OtherKey="ID", IsForeignKey=true)]
		public PermitSet PermitSet
		{
			get
			{
				return this._PermitSet.Entity;
			}
			set
			{
				PermitSet previousValue = this._PermitSet.Entity;
				if (((previousValue != value) 
							|| (this._PermitSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitSet.Entity = null;
						previousValue.ResponsePermitSets.Remove(this);
					}
					this._PermitSet.Entity = value;
					if ((value != null))
					{
						value.ResponsePermitSets.Add(this);
						this._PermitSetID = value.ID;
					}
					else
					{
						this._PermitSetID = default(int);
					}
					this.SendPropertyChanged("PermitSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ResponsePermitSet", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ResponsePermitSets.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ResponsePermitSets.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_ResponsePermitSet", Storage="_Response", ThisKey="ResponseID", OtherKey="ResponseID", IsForeignKey=true)]
		public Response Response
		{
			get
			{
				return this._Response.Entity;
			}
			set
			{
				Response previousValue = this._Response.Entity;
				if (((previousValue != value) 
							|| (this._Response.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Response.Entity = null;
						previousValue.ResponsePermitSets.Remove(this);
					}
					this._Response.Entity = value;
					if ((value != null))
					{
						value.ResponsePermitSets.Add(this);
						this._ResponseID = value.ResponseID;
					}
					else
					{
						this._ResponseID = default(int);
					}
					this.SendPropertyChanged("Response");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionSet")]
	public partial class QuestionSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _QuestionSetOrder;
		
		private int _TechnologyID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<QuestionSetQuestion> _QuestionSetQuestions;
		
		private EntitySet<QuestionSetLocation> _QuestionSetLocations;
		
		private EntityRef<Technology> _Technology;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuestionSetOrderChanging(int value);
    partial void OnQuestionSetOrderChanged();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public QuestionSet()
		{
			this._QuestionSetQuestions = new EntitySet<QuestionSetQuestion>(new Action<QuestionSetQuestion>(this.attach_QuestionSetQuestions), new Action<QuestionSetQuestion>(this.detach_QuestionSetQuestions));
			this._QuestionSetLocations = new EntitySet<QuestionSetLocation>(new Action<QuestionSetLocation>(this.attach_QuestionSetLocations), new Action<QuestionSetLocation>(this.detach_QuestionSetLocations));
			this._Technology = default(EntityRef<Technology>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="QuestionSetID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionSetOrder", DbType="Int NOT NULL")]
		public int QuestionSetOrder
		{
			get
			{
				return this._QuestionSetOrder;
			}
			set
			{
				if ((this._QuestionSetOrder != value))
				{
					this.OnQuestionSetOrderChanging(value);
					this.SendPropertyChanging();
					this._QuestionSetOrder = value;
					this.SendPropertyChanged("QuestionSetOrder");
					this.OnQuestionSetOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionSet_QuestionSetQuestion", Storage="_QuestionSetQuestions", ThisKey="ID", OtherKey="QuestionSetID")]
		public EntitySet<QuestionSetQuestion> QuestionSetQuestions
		{
			get
			{
				return this._QuestionSetQuestions;
			}
			set
			{
				this._QuestionSetQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionSet_QuestionSetLocation", Storage="_QuestionSetLocations", ThisKey="ID", OtherKey="QuestionSetID")]
		public EntitySet<QuestionSetLocation> QuestionSetLocations
		{
			get
			{
				return this._QuestionSetLocations;
			}
			set
			{
				this._QuestionSetLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_QuestionSet", Storage="_Technology", ThisKey="TechnologyID", OtherKey="ID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.QuestionSets.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.QuestionSets.Add(this);
						this._TechnologyID = value.ID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionSetQuestions(QuestionSetQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionSet = this;
		}
		
		private void detach_QuestionSetQuestions(QuestionSetQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionSet = null;
		}
		
		private void attach_QuestionSetLocations(QuestionSetLocation entity)
		{
			this.SendPropertyChanging();
			entity.QuestionSet = this;
		}
		
		private void detach_QuestionSetLocations(QuestionSetLocation entity)
		{
			this.SendPropertyChanging();
			entity.QuestionSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionSetQuestions")]
	public partial class QuestionSetQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionSetID;
		
		private int _QuestionID;
		
		private int _QuestionOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<QuestionSet> _QuestionSet;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionSetIDChanging(int value);
    partial void OnQuestionSetIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionOrderChanging(int value);
    partial void OnQuestionOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public QuestionSetQuestion()
		{
			this._QuestionSet = default(EntityRef<QuestionSet>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionSetID
		{
			get
			{
				return this._QuestionSetID;
			}
			set
			{
				if ((this._QuestionSetID != value))
				{
					if (this._QuestionSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionSetIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionSetID = value;
					this.SendPropertyChanged("QuestionSetID");
					this.OnQuestionSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionOrder", DbType="Int NOT NULL")]
		public int QuestionOrder
		{
			get
			{
				return this._QuestionOrder;
			}
			set
			{
				if ((this._QuestionOrder != value))
				{
					this.OnQuestionOrderChanging(value);
					this.SendPropertyChanging();
					this._QuestionOrder = value;
					this.SendPropertyChanged("QuestionOrder");
					this.OnQuestionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionSet_QuestionSetQuestion", Storage="_QuestionSet", ThisKey="QuestionSetID", OtherKey="ID", IsForeignKey=true)]
		public QuestionSet QuestionSet
		{
			get
			{
				return this._QuestionSet.Entity;
			}
			set
			{
				QuestionSet previousValue = this._QuestionSet.Entity;
				if (((previousValue != value) 
							|| (this._QuestionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionSet.Entity = null;
						previousValue.QuestionSetQuestions.Remove(this);
					}
					this._QuestionSet.Entity = value;
					if ((value != null))
					{
						value.QuestionSetQuestions.Add(this);
						this._QuestionSetID = value.ID;
					}
					else
					{
						this._QuestionSetID = default(int);
					}
					this.SendPropertyChanged("QuestionSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionSetQuestion", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionSetQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionSetQuestions.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TechnologyPermitSet")]
	public partial class TechnologyPermitSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechnologyID;
		
		private int _PermitSetID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PermitSet> _PermitSet;
		
		private EntityRef<Technology> _Technology;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnPermitSetIDChanging(int value);
    partial void OnPermitSetIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public TechnologyPermitSet()
		{
			this._PermitSet = default(EntityRef<PermitSet>);
			this._Technology = default(EntityRef<Technology>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitSetID
		{
			get
			{
				return this._PermitSetID;
			}
			set
			{
				if ((this._PermitSetID != value))
				{
					if (this._PermitSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitSetIDChanging(value);
					this.SendPropertyChanging();
					this._PermitSetID = value;
					this.SendPropertyChanged("PermitSetID");
					this.OnPermitSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_TechnologyPermitSet", Storage="_PermitSet", ThisKey="PermitSetID", OtherKey="ID", IsForeignKey=true)]
		public PermitSet PermitSet
		{
			get
			{
				return this._PermitSet.Entity;
			}
			set
			{
				PermitSet previousValue = this._PermitSet.Entity;
				if (((previousValue != value) 
							|| (this._PermitSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitSet.Entity = null;
						previousValue.TechnologyPermitSets.Remove(this);
					}
					this._PermitSet.Entity = value;
					if ((value != null))
					{
						value.TechnologyPermitSets.Add(this);
						this._PermitSetID = value.ID;
					}
					else
					{
						this._PermitSetID = default(int);
					}
					this.SendPropertyChanged("PermitSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_TechnologyPermitSet", Storage="_Technology", ThisKey="TechnologyID", OtherKey="ID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.TechnologyPermitSets.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.TechnologyPermitSets.Add(this);
						this._TechnologyID = value.ID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationPermitSet")]
	public partial class LocationPermitSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private int _PermitSetID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PermitSet> _PermitSet;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnPermitSetIDChanging(int value);
    partial void OnPermitSetIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public LocationPermitSet()
		{
			this._PermitSet = default(EntityRef<PermitSet>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitSetID
		{
			get
			{
				return this._PermitSetID;
			}
			set
			{
				if ((this._PermitSetID != value))
				{
					if (this._PermitSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitSetIDChanging(value);
					this.SendPropertyChanging();
					this._PermitSetID = value;
					this.SendPropertyChanged("PermitSetID");
					this.OnPermitSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_LocationPermitSet", Storage="_PermitSet", ThisKey="PermitSetID", OtherKey="ID", IsForeignKey=true)]
		public PermitSet PermitSet
		{
			get
			{
				return this._PermitSet.Entity;
			}
			set
			{
				PermitSet previousValue = this._PermitSet.Entity;
				if (((previousValue != value) 
							|| (this._PermitSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitSet.Entity = null;
						previousValue.LocationPermitSets.Remove(this);
					}
					this._PermitSet.Entity = value;
					if ((value != null))
					{
						value.LocationPermitSets.Add(this);
						this._PermitSetID = value.ID;
					}
					else
					{
						this._PermitSetID = default(int);
					}
					this.SendPropertyChanged("PermitSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPermitSet", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationPermitSets.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationPermitSets.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Technology")]
	public partial class Technology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _TableDisplayOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<QuestionSet> _QuestionSets;
		
		private EntitySet<TechnologyPermitSet> _TechnologyPermitSets;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Evaluation> _Evaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTableDisplayOrderChanging(int value);
    partial void OnTableDisplayOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Technology()
		{
			this._QuestionSets = new EntitySet<QuestionSet>(new Action<QuestionSet>(this.attach_QuestionSets), new Action<QuestionSet>(this.detach_QuestionSets));
			this._TechnologyPermitSets = new EntitySet<TechnologyPermitSet>(new Action<TechnologyPermitSet>(this.attach_TechnologyPermitSets), new Action<TechnologyPermitSet>(this.detach_TechnologyPermitSets));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TechnologyID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableDisplayOrder", DbType="Int NOT NULL")]
		public int TableDisplayOrder
		{
			get
			{
				return this._TableDisplayOrder;
			}
			set
			{
				if ((this._TableDisplayOrder != value))
				{
					this.OnTableDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._TableDisplayOrder = value;
					this.SendPropertyChanged("TableDisplayOrder");
					this.OnTableDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_QuestionSet", Storage="_QuestionSets", ThisKey="ID", OtherKey="TechnologyID")]
		public EntitySet<QuestionSet> QuestionSets
		{
			get
			{
				return this._QuestionSets;
			}
			set
			{
				this._QuestionSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_TechnologyPermitSet", Storage="_TechnologyPermitSets", ThisKey="ID", OtherKey="TechnologyID")]
		public EntitySet<TechnologyPermitSet> TechnologyPermitSets
		{
			get
			{
				return this._TechnologyPermitSets;
			}
			set
			{
				this._TechnologyPermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_User", Storage="_Users", ThisKey="ID", OtherKey="TechnologyID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="TechnologyID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionSets(QuestionSet entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_QuestionSets(QuestionSet entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
		
		private void attach_TechnologyPermitSets(TechnologyPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_TechnologyPermitSets(TechnologyPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CountyID;
		
		private string _Description;
		
		private int _TableDisplayOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<ResponsePermitSet> _ResponsePermitSets;
		
		private EntitySet<LocationPermitSet> _LocationPermitSets;
		
		private EntitySet<QuestionSetLocation> _QuestionSetLocations;
		
		private EntitySet<PreEvaluationResponsePermitSet> _PreEvaluationResponsePermitSets;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<County> _County;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountyIDChanging(int value);
    partial void OnCountyIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTableDisplayOrderChanging(int value);
    partial void OnTableDisplayOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Location()
		{
			this._ResponsePermitSets = new EntitySet<ResponsePermitSet>(new Action<ResponsePermitSet>(this.attach_ResponsePermitSets), new Action<ResponsePermitSet>(this.detach_ResponsePermitSets));
			this._LocationPermitSets = new EntitySet<LocationPermitSet>(new Action<LocationPermitSet>(this.attach_LocationPermitSets), new Action<LocationPermitSet>(this.detach_LocationPermitSets));
			this._QuestionSetLocations = new EntitySet<QuestionSetLocation>(new Action<QuestionSetLocation>(this.attach_QuestionSetLocations), new Action<QuestionSetLocation>(this.detach_QuestionSetLocations));
			this._PreEvaluationResponsePermitSets = new EntitySet<PreEvaluationResponsePermitSet>(new Action<PreEvaluationResponsePermitSet>(this.attach_PreEvaluationResponsePermitSets), new Action<PreEvaluationResponsePermitSet>(this.detach_PreEvaluationResponsePermitSets));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._County = default(EntityRef<County>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="LocationID", Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int NOT NULL")]
		public int CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableDisplayOrder", DbType="Int NOT NULL")]
		public int TableDisplayOrder
		{
			get
			{
				return this._TableDisplayOrder;
			}
			set
			{
				if ((this._TableDisplayOrder != value))
				{
					this.OnTableDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._TableDisplayOrder = value;
					this.SendPropertyChanged("TableDisplayOrder");
					this.OnTableDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ResponsePermitSet", Storage="_ResponsePermitSets", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<ResponsePermitSet> ResponsePermitSets
		{
			get
			{
				return this._ResponsePermitSets;
			}
			set
			{
				this._ResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPermitSet", Storage="_LocationPermitSets", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<LocationPermitSet> LocationPermitSets
		{
			get
			{
				return this._LocationPermitSets;
			}
			set
			{
				this._LocationPermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_QuestionSetLocation", Storage="_QuestionSetLocations", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<QuestionSetLocation> QuestionSetLocations
		{
			get
			{
				return this._QuestionSetLocations;
			}
			set
			{
				this._QuestionSetLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_PreEvaluationResponsePermitSet", Storage="_PreEvaluationResponsePermitSets", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<PreEvaluationResponsePermitSet> PreEvaluationResponsePermitSets
		{
			get
			{
				return this._PreEvaluationResponsePermitSets;
			}
			set
			{
				this._PreEvaluationResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_User", Storage="_Users", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="LocationID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Location", Storage="_County", ThisKey="CountyID", OtherKey="ID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._CountyID = value.ID;
					}
					else
					{
						this._CountyID = default(int);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationPermitSets(LocationPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationPermitSets(LocationPermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_QuestionSetLocations(QuestionSetLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_QuestionSetLocations(QuestionSetLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<Permit> _Permits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Department()
		{
			this._Permits = new EntitySet<Permit>(new Action<Permit>(this.attach_Permits), new Action<Permit>(this.detach_Permits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="DepartmentID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Permit", Storage="_Permits", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Permit> Permits
		{
			get
			{
				return this._Permits;
			}
			set
			{
				this._Permits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permit")]
	public partial class Permit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Description;
		
		private string _URL;
		
		private System.Nullable<int> _DepartmentID;
		
		private string _AppendixLink;
		
		private short _Duration;
		
		private int _PermitTypeID;
		
		private System.Nullable<int> _CountyID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<PermitDependency> _PermitDependencies;
		
		private EntitySet<PermitDependency> _PermitDependencies1;
		
		private EntitySet<PermitSetPermit> _PermitSetPermits;
		
		private EntityRef<County> _County;
		
		private EntityRef<Department> _Department1;
		
		private EntityRef<PermitType> _PermitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnAppendixLinkChanging(string value);
    partial void OnAppendixLinkChanged();
    partial void OnDurationChanging(short value);
    partial void OnDurationChanged();
    partial void OnPermitTypeIDChanging(int value);
    partial void OnPermitTypeIDChanged();
    partial void OnCountyIDChanging(System.Nullable<int> value);
    partial void OnCountyIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Permit()
		{
			this._PermitDependencies = new EntitySet<PermitDependency>(new Action<PermitDependency>(this.attach_PermitDependencies), new Action<PermitDependency>(this.detach_PermitDependencies));
			this._PermitDependencies1 = new EntitySet<PermitDependency>(new Action<PermitDependency>(this.attach_PermitDependencies1), new Action<PermitDependency>(this.detach_PermitDependencies1));
			this._PermitSetPermits = new EntitySet<PermitSetPermit>(new Action<PermitSetPermit>(this.attach_PermitSetPermits), new Action<PermitSetPermit>(this.detach_PermitSetPermits));
			this._County = default(EntityRef<County>);
			this._Department1 = default(EntityRef<Department>);
			this._PermitType = default(EntityRef<PermitType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PermitID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppendixLink", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string AppendixLink
		{
			get
			{
				return this._AppendixLink;
			}
			set
			{
				if ((this._AppendixLink != value))
				{
					this.OnAppendixLinkChanging(value);
					this.SendPropertyChanging();
					this._AppendixLink = value;
					this.SendPropertyChanged("AppendixLink");
					this.OnAppendixLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="SmallInt NOT NULL")]
		public short Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitTypeID", DbType="Int NOT NULL")]
		public int PermitTypeID
		{
			get
			{
				return this._PermitTypeID;
			}
			set
			{
				if ((this._PermitTypeID != value))
				{
					if (this._PermitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PermitTypeID = value;
					this.SendPropertyChanged("PermitTypeID");
					this.OnPermitTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyID", DbType="Int")]
		public System.Nullable<int> CountyID
		{
			get
			{
				return this._CountyID;
			}
			set
			{
				if ((this._CountyID != value))
				{
					if (this._County.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIDChanging(value);
					this.SendPropertyChanging();
					this._CountyID = value;
					this.SendPropertyChanged("CountyID");
					this.OnCountyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitDependency", Storage="_PermitDependencies", ThisKey="ID", OtherKey="PermitID")]
		public EntitySet<PermitDependency> PermitDependencies
		{
			get
			{
				return this._PermitDependencies;
			}
			set
			{
				this._PermitDependencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitDependency1", Storage="_PermitDependencies1", ThisKey="ID", OtherKey="DependentPermitID")]
		public EntitySet<PermitDependency> PermitDependencies1
		{
			get
			{
				return this._PermitDependencies1;
			}
			set
			{
				this._PermitDependencies1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permit_PermitSetPermit", Storage="_PermitSetPermits", ThisKey="ID", OtherKey="PermitID")]
		public EntitySet<PermitSetPermit> PermitSetPermits
		{
			get
			{
				return this._PermitSetPermits;
			}
			set
			{
				this._PermitSetPermits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="County_Permit", Storage="_County", ThisKey="CountyID", OtherKey="ID", IsForeignKey=true)]
		public County County
		{
			get
			{
				return this._County.Entity;
			}
			set
			{
				County previousValue = this._County.Entity;
				if (((previousValue != value) 
							|| (this._County.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._County.Entity = null;
						previousValue.Permits.Remove(this);
					}
					this._County.Entity = value;
					if ((value != null))
					{
						value.Permits.Add(this);
						this._CountyID = value.ID;
					}
					else
					{
						this._CountyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("County");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Permit", Storage="_Department1", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Permits.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Permits.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitType_Permit", Storage="_PermitType", ThisKey="PermitTypeID", OtherKey="ID", IsForeignKey=true)]
		public PermitType PermitType
		{
			get
			{
				return this._PermitType.Entity;
			}
			set
			{
				PermitType previousValue = this._PermitType.Entity;
				if (((previousValue != value) 
							|| (this._PermitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitType.Entity = null;
						previousValue.Permits.Remove(this);
					}
					this._PermitType.Entity = value;
					if ((value != null))
					{
						value.Permits.Add(this);
						this._PermitTypeID = value.ID;
					}
					else
					{
						this._PermitTypeID = default(int);
					}
					this.SendPropertyChanged("PermitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermitDependencies(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.Permit = this;
		}
		
		private void detach_PermitDependencies(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.Permit = null;
		}
		
		private void attach_PermitDependencies1(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.Permit1 = this;
		}
		
		private void detach_PermitDependencies1(PermitDependency entity)
		{
			this.SendPropertyChanging();
			entity.Permit1 = null;
		}
		
		private void attach_PermitSetPermits(PermitSetPermit entity)
		{
			this.SendPropertyChanging();
			entity.Permit = this;
		}
		
		private void detach_PermitSetPermits(PermitSetPermit entity)
		{
			this.SendPropertyChanging();
			entity.Permit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionSetLocations")]
	public partial class QuestionSetLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _QuestionSetID;
		
		private int _LocationID;
		
		private int _QuestionSetOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<QuestionSet> _QuestionSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionSetIDChanging(int value);
    partial void OnQuestionSetIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnQuestionSetOrderChanging(int value);
    partial void OnQuestionSetOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public QuestionSetLocation()
		{
			this._Location = default(EntityRef<Location>);
			this._QuestionSet = default(EntityRef<QuestionSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="QuestionSetLocationID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionSetID", DbType="Int NOT NULL")]
		public int QuestionSetID
		{
			get
			{
				return this._QuestionSetID;
			}
			set
			{
				if ((this._QuestionSetID != value))
				{
					if (this._QuestionSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionSetIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionSetID = value;
					this.SendPropertyChanged("QuestionSetID");
					this.OnQuestionSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionSetOrder", DbType="Int NOT NULL")]
		public int QuestionSetOrder
		{
			get
			{
				return this._QuestionSetOrder;
			}
			set
			{
				if ((this._QuestionSetOrder != value))
				{
					this.OnQuestionSetOrderChanging(value);
					this.SendPropertyChanging();
					this._QuestionSetOrder = value;
					this.SendPropertyChanged("QuestionSetOrder");
					this.OnQuestionSetOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_QuestionSetLocation", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.QuestionSetLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.QuestionSetLocations.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionSet_QuestionSetLocation", Storage="_QuestionSet", ThisKey="QuestionSetID", OtherKey="ID", IsForeignKey=true)]
		public QuestionSet QuestionSet
		{
			get
			{
				return this._QuestionSet.Entity;
			}
			set
			{
				QuestionSet previousValue = this._QuestionSet.Entity;
				if (((previousValue != value) 
							|| (this._QuestionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionSet.Entity = null;
						previousValue.QuestionSetLocations.Remove(this);
					}
					this._QuestionSet.Entity = value;
					if ((value != null))
					{
						value.QuestionSetLocations.Add(this);
						this._QuestionSetID = value.ID;
					}
					else
					{
						this._QuestionSetID = default(int);
					}
					this.SendPropertyChanged("QuestionSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionType")]
	public partial class QuestionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<PreEvaluationQuestion> _PreEvaluationQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public QuestionType()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._PreEvaluationQuestions = new EntitySet<PreEvaluationQuestion>(new Action<PreEvaluationQuestion>(this.attach_PreEvaluationQuestions), new Action<PreEvaluationQuestion>(this.detach_PreEvaluationQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="QuestionTypeID", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_Questions", ThisKey="ID", OtherKey="QuestionTypeID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_PreEvaluationQuestion", Storage="_PreEvaluationQuestions", ThisKey="ID", OtherKey="SubQuestionTypeID")]
		public EntitySet<PreEvaluationQuestion> PreEvaluationQuestions
		{
			get
			{
				return this._PreEvaluationQuestions;
			}
			set
			{
				this._PreEvaluationQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
		
		private void attach_PreEvaluationQuestions(PreEvaluationQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_PreEvaluationQuestions(PreEvaluationQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreEvaluationResponsePermitSet")]
	public partial class PreEvaluationResponsePermitSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreEvaluationResponseID;
		
		private int _PermitSetID;
		
		private int _LocationID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<PermitSet> _PermitSet;
		
		private EntityRef<PreEvaluationResponse> _PreEvaluationResponse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreEvaluationResponseIDChanging(int value);
    partial void OnPreEvaluationResponseIDChanged();
    partial void OnPermitSetIDChanging(int value);
    partial void OnPermitSetIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PreEvaluationResponsePermitSet()
		{
			this._Location = default(EntityRef<Location>);
			this._PermitSet = default(EntityRef<PermitSet>);
			this._PreEvaluationResponse = default(EntityRef<PreEvaluationResponse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationResponseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PreEvaluationResponseID
		{
			get
			{
				return this._PreEvaluationResponseID;
			}
			set
			{
				if ((this._PreEvaluationResponseID != value))
				{
					if (this._PreEvaluationResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreEvaluationResponseIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationResponseID = value;
					this.SendPropertyChanged("PreEvaluationResponseID");
					this.OnPreEvaluationResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermitSetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermitSetID
		{
			get
			{
				return this._PermitSetID;
			}
			set
			{
				if ((this._PermitSetID != value))
				{
					if (this._PermitSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermitSetIDChanging(value);
					this.SendPropertyChanging();
					this._PermitSetID = value;
					this.SendPropertyChanged("PermitSetID");
					this.OnPermitSetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_PreEvaluationResponsePermitSet", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.PreEvaluationResponsePermitSets.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationResponsePermitSets.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermitSet_PreEvaluationResponsePermitSet", Storage="_PermitSet", ThisKey="PermitSetID", OtherKey="ID", IsForeignKey=true)]
		public PermitSet PermitSet
		{
			get
			{
				return this._PermitSet.Entity;
			}
			set
			{
				PermitSet previousValue = this._PermitSet.Entity;
				if (((previousValue != value) 
							|| (this._PermitSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermitSet.Entity = null;
						previousValue.PreEvaluationResponsePermitSets.Remove(this);
					}
					this._PermitSet.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationResponsePermitSets.Add(this);
						this._PermitSetID = value.ID;
					}
					else
					{
						this._PermitSetID = default(int);
					}
					this.SendPropertyChanged("PermitSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_PreEvaluationResponsePermitSet", Storage="_PreEvaluationResponse", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID", IsForeignKey=true)]
		public PreEvaluationResponse PreEvaluationResponse
		{
			get
			{
				return this._PreEvaluationResponse.Entity;
			}
			set
			{
				PreEvaluationResponse previousValue = this._PreEvaluationResponse.Entity;
				if (((previousValue != value) 
							|| (this._PreEvaluationResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreEvaluationResponse.Entity = null;
						previousValue.PreEvaluationResponsePermitSets.Remove(this);
					}
					this._PreEvaluationResponse.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationResponsePermitSets.Add(this);
						this._PreEvaluationResponseID = value.PreEvaluationResponseID;
					}
					else
					{
						this._PreEvaluationResponseID = default(int);
					}
					this.SendPropertyChanged("PreEvaluationResponse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private string _Title;
		
		private string _Organization;
		
		private string _EmailAddress;
		
		private string _Password;
		
		private string _TelephoneNumber;
		
		private int _TechnologyID;
		
		private int _LocationID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private System.Nullable<System.DateTime> _DateLastLogin;
		
		private EntitySet<UserLoginHistory> _UserLoginHistories;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Technology> _Technology;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnDateLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLastLoginChanged();
    #endregion
		
		public User()
		{
			this._UserLoginHistories = new EntitySet<UserLoginHistory>(new Action<UserLoginHistory>(this.attach_UserLoginHistories), new Action<UserLoginHistory>(this.detach_UserLoginHistories));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Location = default(EntityRef<Location>);
			this._Technology = default(EntityRef<Technology>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organization", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLastLogin
		{
			get
			{
				return this._DateLastLogin;
			}
			set
			{
				if ((this._DateLastLogin != value))
				{
					this.OnDateLastLoginChanging(value);
					this.SendPropertyChanging();
					this._DateLastLogin = value;
					this.SendPropertyChanged("DateLastLogin");
					this.OnDateLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLoginHistory", Storage="_UserLoginHistories", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserLoginHistory> UserLoginHistories
		{
			get
			{
				return this._UserLoginHistories;
			}
			set
			{
				this._UserLoginHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Evaluation", Storage="_Evaluations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_User", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_User", Storage="_Technology", ThisKey="TechnologyID", OtherKey="ID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TechnologyID = value.ID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLoginHistories(UserLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLoginHistories(UserLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLoginHistory")]
	public partial class UserLoginHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _LoginDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginDateChanging(System.DateTime value);
    partial void OnLoginDateChanged();
    #endregion
		
		public UserLoginHistory()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLoginHistory", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLoginHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLoginHistories.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationPreEvalResponse")]
	public partial class EvaluationPreEvalResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationPreEvalResponseID;
		
		private int _EvaluationID;
		
		private int _PreEvaluationQuestionID;
		
		private int _PreEvaluationResponseID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<PreEvaluationQuestion> _PreEvaluationQuestion;
		
		private EntityRef<PreEvaluationResponse> _PreEvaluationResponse;
		
		private EntityRef<Evaluation> _Evaluation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationPreEvalResponseIDChanging(int value);
    partial void OnEvaluationPreEvalResponseIDChanged();
    partial void OnEvaluationIDChanging(int value);
    partial void OnEvaluationIDChanged();
    partial void OnPreEvaluationQuestionIDChanging(int value);
    partial void OnPreEvaluationQuestionIDChanged();
    partial void OnPreEvaluationResponseIDChanging(int value);
    partial void OnPreEvaluationResponseIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public EvaluationPreEvalResponse()
		{
			this._PreEvaluationQuestion = default(EntityRef<PreEvaluationQuestion>);
			this._PreEvaluationResponse = default(EntityRef<PreEvaluationResponse>);
			this._Evaluation = default(EntityRef<Evaluation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPreEvalResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationPreEvalResponseID
		{
			get
			{
				return this._EvaluationPreEvalResponseID;
			}
			set
			{
				if ((this._EvaluationPreEvalResponseID != value))
				{
					this.OnEvaluationPreEvalResponseIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPreEvalResponseID = value;
					this.SendPropertyChanged("EvaluationPreEvalResponseID");
					this.OnEvaluationPreEvalResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationID", DbType="Int NOT NULL")]
		public int EvaluationID
		{
			get
			{
				return this._EvaluationID;
			}
			set
			{
				if ((this._EvaluationID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationID = value;
					this.SendPropertyChanged("EvaluationID");
					this.OnEvaluationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationQuestionID", DbType="Int NOT NULL")]
		public int PreEvaluationQuestionID
		{
			get
			{
				return this._PreEvaluationQuestionID;
			}
			set
			{
				if ((this._PreEvaluationQuestionID != value))
				{
					if (this._PreEvaluationQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreEvaluationQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationQuestionID = value;
					this.SendPropertyChanged("PreEvaluationQuestionID");
					this.OnPreEvaluationQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationResponseID", DbType="Int NOT NULL")]
		public int PreEvaluationResponseID
		{
			get
			{
				return this._PreEvaluationResponseID;
			}
			set
			{
				if ((this._PreEvaluationResponseID != value))
				{
					if (this._PreEvaluationResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreEvaluationResponseIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationResponseID = value;
					this.SendPropertyChanged("PreEvaluationResponseID");
					this.OnPreEvaluationResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationQuestion_EvaluationPreEvalResponse", Storage="_PreEvaluationQuestion", ThisKey="PreEvaluationQuestionID", OtherKey="PreEvaluationQuestionID", IsForeignKey=true)]
		public PreEvaluationQuestion PreEvaluationQuestion
		{
			get
			{
				return this._PreEvaluationQuestion.Entity;
			}
			set
			{
				PreEvaluationQuestion previousValue = this._PreEvaluationQuestion.Entity;
				if (((previousValue != value) 
							|| (this._PreEvaluationQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreEvaluationQuestion.Entity = null;
						previousValue.EvaluationPreEvalResponses.Remove(this);
					}
					this._PreEvaluationQuestion.Entity = value;
					if ((value != null))
					{
						value.EvaluationPreEvalResponses.Add(this);
						this._PreEvaluationQuestionID = value.PreEvaluationQuestionID;
					}
					else
					{
						this._PreEvaluationQuestionID = default(int);
					}
					this.SendPropertyChanged("PreEvaluationQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_EvaluationPreEvalResponse", Storage="_PreEvaluationResponse", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID", IsForeignKey=true)]
		public PreEvaluationResponse PreEvaluationResponse
		{
			get
			{
				return this._PreEvaluationResponse.Entity;
			}
			set
			{
				PreEvaluationResponse previousValue = this._PreEvaluationResponse.Entity;
				if (((previousValue != value) 
							|| (this._PreEvaluationResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreEvaluationResponse.Entity = null;
						previousValue.EvaluationPreEvalResponses.Remove(this);
					}
					this._PreEvaluationResponse.Entity = value;
					if ((value != null))
					{
						value.EvaluationPreEvalResponses.Add(this);
						this._PreEvaluationResponseID = value.PreEvaluationResponseID;
					}
					else
					{
						this._PreEvaluationResponseID = default(int);
					}
					this.SendPropertyChanged("PreEvaluationResponse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationPreEvalResponse", Storage="_Evaluation", ThisKey="EvaluationID", OtherKey="EvaluationID", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.EvaluationPreEvalResponses.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.EvaluationPreEvalResponses.Add(this);
						this._EvaluationID = value.EvaluationID;
					}
					else
					{
						this._EvaluationID = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private string _QuestionText;
		
		private string _Description;
		
		private int _QuestionTypeID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<QuestionSetQuestion> _QuestionSetQuestions;
		
		private EntitySet<Response> _Responses;
		
		private EntitySet<Response> _Responses1;
		
		private EntitySet<Response> _Responses2;
		
		private EntitySet<PreEvaluationSubQuestion> _PreEvaluationSubQuestions;
		
		private EntitySet<EvaluationResponse> _EvaluationResponses;
		
		private EntityRef<QuestionType> _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuestionTypeIDChanging(int value);
    partial void OnQuestionTypeIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Question()
		{
			this._QuestionSetQuestions = new EntitySet<QuestionSetQuestion>(new Action<QuestionSetQuestion>(this.attach_QuestionSetQuestions), new Action<QuestionSetQuestion>(this.detach_QuestionSetQuestions));
			this._Responses = new EntitySet<Response>(new Action<Response>(this.attach_Responses), new Action<Response>(this.detach_Responses));
			this._Responses1 = new EntitySet<Response>(new Action<Response>(this.attach_Responses1), new Action<Response>(this.detach_Responses1));
			this._Responses2 = new EntitySet<Response>(new Action<Response>(this.attach_Responses2), new Action<Response>(this.detach_Responses2));
			this._PreEvaluationSubQuestions = new EntitySet<PreEvaluationSubQuestion>(new Action<PreEvaluationSubQuestion>(this.attach_PreEvaluationSubQuestions), new Action<PreEvaluationSubQuestion>(this.detach_PreEvaluationSubQuestions));
			this._EvaluationResponses = new EntitySet<EvaluationResponse>(new Action<EvaluationResponse>(this.attach_EvaluationResponses), new Action<EvaluationResponse>(this.detach_EvaluationResponses));
			this._QuestionType = default(EntityRef<QuestionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="nvarchar(max) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionTypeID", DbType="Int NOT NULL")]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeID = value;
					this.SendPropertyChanged("QuestionTypeID");
					this.OnQuestionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionSetQuestion", Storage="_QuestionSetQuestions", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<QuestionSetQuestion> QuestionSetQuestions
		{
			get
			{
				return this._QuestionSetQuestions;
			}
			set
			{
				this._QuestionSetQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response", Storage="_Responses", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<Response> Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				this._Responses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response1", Storage="_Responses1", ThisKey="QuestionID", OtherKey="SubQuestionID")]
		public EntitySet<Response> Responses1
		{
			get
			{
				return this._Responses1;
			}
			set
			{
				this._Responses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response2", Storage="_Responses2", ThisKey="QuestionID", OtherKey="SubQuestionID")]
		public EntitySet<Response> Responses2
		{
			get
			{
				return this._Responses2;
			}
			set
			{
				this._Responses2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_PreEvaluationSubQuestion", Storage="_PreEvaluationSubQuestions", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<PreEvaluationSubQuestion> PreEvaluationSubQuestions
		{
			get
			{
				return this._PreEvaluationSubQuestions;
			}
			set
			{
				this._PreEvaluationSubQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_EvaluationResponse", Storage="_EvaluationResponses", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<EvaluationResponse> EvaluationResponses
		{
			get
			{
				return this._EvaluationResponses;
			}
			set
			{
				this._EvaluationResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_QuestionType", ThisKey="QuestionTypeID", OtherKey="ID", IsForeignKey=true)]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QuestionTypeID = value.ID;
					}
					else
					{
						this._QuestionTypeID = default(int);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionSetQuestions(QuestionSetQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionSetQuestions(QuestionSetQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Responses1(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question1 = this;
		}
		
		private void detach_Responses1(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question1 = null;
		}
		
		private void attach_Responses2(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question2 = this;
		}
		
		private void detach_Responses2(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question2 = null;
		}
		
		private void attach_PreEvaluationSubQuestions(PreEvaluationSubQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_PreEvaluationSubQuestions(PreEvaluationSubQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Response")]
	public partial class Response : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResponseID;
		
		private string _Name;
		
		private string _Description;
		
		private int _QuestionID;
		
		private bool _RequiresPermits;
		
		private bool _IsEndPoint;
		
		private string _EndPointMessage;
		
		private System.Nullable<int> _SubQuestionID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<ResponsePermitSet> _ResponsePermitSets;
		
		private EntitySet<EvaluationResponse> _EvaluationResponses;
		
		private EntitySet<EvaluationResponse> _EvaluationResponses1;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Question> _Question1;
		
		private EntityRef<Question> _Question2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponseIDChanging(int value);
    partial void OnResponseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnRequiresPermitsChanging(bool value);
    partial void OnRequiresPermitsChanged();
    partial void OnIsEndPointChanging(bool value);
    partial void OnIsEndPointChanged();
    partial void OnEndPointMessageChanging(string value);
    partial void OnEndPointMessageChanged();
    partial void OnSubQuestionIDChanging(System.Nullable<int> value);
    partial void OnSubQuestionIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Response()
		{
			this._ResponsePermitSets = new EntitySet<ResponsePermitSet>(new Action<ResponsePermitSet>(this.attach_ResponsePermitSets), new Action<ResponsePermitSet>(this.detach_ResponsePermitSets));
			this._EvaluationResponses = new EntitySet<EvaluationResponse>(new Action<EvaluationResponse>(this.attach_EvaluationResponses), new Action<EvaluationResponse>(this.detach_EvaluationResponses));
			this._EvaluationResponses1 = new EntitySet<EvaluationResponse>(new Action<EvaluationResponse>(this.attach_EvaluationResponses1), new Action<EvaluationResponse>(this.detach_EvaluationResponses1));
			this._Question = default(EntityRef<Question>);
			this._Question1 = default(EntityRef<Question>);
			this._Question2 = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResponseID
		{
			get
			{
				return this._ResponseID;
			}
			set
			{
				if ((this._ResponseID != value))
				{
					this.OnResponseIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseID = value;
					this.SendPropertyChanged("ResponseID");
					this.OnResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresPermits", DbType="Bit NOT NULL")]
		public bool RequiresPermits
		{
			get
			{
				return this._RequiresPermits;
			}
			set
			{
				if ((this._RequiresPermits != value))
				{
					this.OnRequiresPermitsChanging(value);
					this.SendPropertyChanging();
					this._RequiresPermits = value;
					this.SendPropertyChanged("RequiresPermits");
					this.OnRequiresPermitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEndPoint", DbType="Bit NOT NULL")]
		public bool IsEndPoint
		{
			get
			{
				return this._IsEndPoint;
			}
			set
			{
				if ((this._IsEndPoint != value))
				{
					this.OnIsEndPointChanging(value);
					this.SendPropertyChanging();
					this._IsEndPoint = value;
					this.SendPropertyChanged("IsEndPoint");
					this.OnIsEndPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndPointMessage", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string EndPointMessage
		{
			get
			{
				return this._EndPointMessage;
			}
			set
			{
				if ((this._EndPointMessage != value))
				{
					this.OnEndPointMessageChanging(value);
					this.SendPropertyChanging();
					this._EndPointMessage = value;
					this.SendPropertyChanged("EndPointMessage");
					this.OnEndPointMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQuestionID", DbType="Int")]
		public System.Nullable<int> SubQuestionID
		{
			get
			{
				return this._SubQuestionID;
			}
			set
			{
				if ((this._SubQuestionID != value))
				{
					if ((this._Question1.HasLoadedOrAssignedValue || this._Question2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._SubQuestionID = value;
					this.SendPropertyChanged("SubQuestionID");
					this.OnSubQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_ResponsePermitSet", Storage="_ResponsePermitSets", ThisKey="ResponseID", OtherKey="ResponseID")]
		public EntitySet<ResponsePermitSet> ResponsePermitSets
		{
			get
			{
				return this._ResponsePermitSets;
			}
			set
			{
				this._ResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_EvaluationResponse", Storage="_EvaluationResponses", ThisKey="ResponseID", OtherKey="ResponseID")]
		public EntitySet<EvaluationResponse> EvaluationResponses
		{
			get
			{
				return this._EvaluationResponses;
			}
			set
			{
				this._EvaluationResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_EvaluationResponse1", Storage="_EvaluationResponses1", ThisKey="ResponseID", OtherKey="ResponseID")]
		public EntitySet<EvaluationResponse> EvaluationResponses1
		{
			get
			{
				return this._EvaluationResponses1;
			}
			set
			{
				this._EvaluationResponses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Responses.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Responses.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response1", Storage="_Question1", ThisKey="SubQuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question1
		{
			get
			{
				return this._Question1.Entity;
			}
			set
			{
				Question previousValue = this._Question1.Entity;
				if (((previousValue != value) 
							|| (this._Question1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question1.Entity = null;
						previousValue.Responses1.Remove(this);
					}
					this._Question1.Entity = value;
					if ((value != null))
					{
						value.Responses1.Add(this);
						this._SubQuestionID = value.QuestionID;
					}
					else
					{
						this._SubQuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response2", Storage="_Question2", ThisKey="SubQuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question2
		{
			get
			{
				return this._Question2.Entity;
			}
			set
			{
				Question previousValue = this._Question2.Entity;
				if (((previousValue != value) 
							|| (this._Question2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question2.Entity = null;
						previousValue.Responses2.Remove(this);
					}
					this._Question2.Entity = value;
					if ((value != null))
					{
						value.Responses2.Add(this);
						this._SubQuestionID = value.QuestionID;
					}
					else
					{
						this._SubQuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Response = this;
		}
		
		private void detach_ResponsePermitSets(ResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.Response = null;
		}
		
		private void attach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Response = this;
		}
		
		private void detach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Response = null;
		}
		
		private void attach_EvaluationResponses1(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Response1 = this;
		}
		
		private void detach_EvaluationResponses1(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Response1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreEvaluationQuestion")]
	public partial class PreEvaluationQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreEvaluationQuestionID;
		
		private string _QuestionText;
		
		private string _Description;
		
		private string _LookupClassName;
		
		private bool _AllowCustomResponse;
		
		private System.Nullable<int> _SubQuestionTypeID;
		
		private int _QuestionOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<EvaluationPreEvalResponse> _EvaluationPreEvalResponses;
		
		private EntitySet<PreEvaluationResponse> _PreEvaluationResponses;
		
		private EntityRef<QuestionType> _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreEvaluationQuestionIDChanging(int value);
    partial void OnPreEvaluationQuestionIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLookupClassNameChanging(string value);
    partial void OnLookupClassNameChanged();
    partial void OnAllowCustomResponseChanging(bool value);
    partial void OnAllowCustomResponseChanged();
    partial void OnSubQuestionTypeIDChanging(System.Nullable<int> value);
    partial void OnSubQuestionTypeIDChanged();
    partial void OnQuestionOrderChanging(int value);
    partial void OnQuestionOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PreEvaluationQuestion()
		{
			this._EvaluationPreEvalResponses = new EntitySet<EvaluationPreEvalResponse>(new Action<EvaluationPreEvalResponse>(this.attach_EvaluationPreEvalResponses), new Action<EvaluationPreEvalResponse>(this.detach_EvaluationPreEvalResponses));
			this._PreEvaluationResponses = new EntitySet<PreEvaluationResponse>(new Action<PreEvaluationResponse>(this.attach_PreEvaluationResponses), new Action<PreEvaluationResponse>(this.detach_PreEvaluationResponses));
			this._QuestionType = default(EntityRef<QuestionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationQuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PreEvaluationQuestionID
		{
			get
			{
				return this._PreEvaluationQuestionID;
			}
			set
			{
				if ((this._PreEvaluationQuestionID != value))
				{
					this.OnPreEvaluationQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationQuestionID = value;
					this.SendPropertyChanged("PreEvaluationQuestionID");
					this.OnPreEvaluationQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="nvarchar(max) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookupClassName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LookupClassName
		{
			get
			{
				return this._LookupClassName;
			}
			set
			{
				if ((this._LookupClassName != value))
				{
					this.OnLookupClassNameChanging(value);
					this.SendPropertyChanging();
					this._LookupClassName = value;
					this.SendPropertyChanged("LookupClassName");
					this.OnLookupClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowCustomResponse", DbType="Bit NOT NULL")]
		public bool AllowCustomResponse
		{
			get
			{
				return this._AllowCustomResponse;
			}
			set
			{
				if ((this._AllowCustomResponse != value))
				{
					this.OnAllowCustomResponseChanging(value);
					this.SendPropertyChanging();
					this._AllowCustomResponse = value;
					this.SendPropertyChanged("AllowCustomResponse");
					this.OnAllowCustomResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQuestionTypeID", DbType="Int")]
		public System.Nullable<int> SubQuestionTypeID
		{
			get
			{
				return this._SubQuestionTypeID;
			}
			set
			{
				if ((this._SubQuestionTypeID != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubQuestionTypeID = value;
					this.SendPropertyChanged("SubQuestionTypeID");
					this.OnSubQuestionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionOrder", DbType="Int NOT NULL")]
		public int QuestionOrder
		{
			get
			{
				return this._QuestionOrder;
			}
			set
			{
				if ((this._QuestionOrder != value))
				{
					this.OnQuestionOrderChanging(value);
					this.SendPropertyChanging();
					this._QuestionOrder = value;
					this.SendPropertyChanged("QuestionOrder");
					this.OnQuestionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationQuestion_EvaluationPreEvalResponse", Storage="_EvaluationPreEvalResponses", ThisKey="PreEvaluationQuestionID", OtherKey="PreEvaluationQuestionID")]
		public EntitySet<EvaluationPreEvalResponse> EvaluationPreEvalResponses
		{
			get
			{
				return this._EvaluationPreEvalResponses;
			}
			set
			{
				this._EvaluationPreEvalResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationQuestion_PreEvaluationResponse", Storage="_PreEvaluationResponses", ThisKey="PreEvaluationQuestionID", OtherKey="PreEvaluationQuestionID")]
		public EntitySet<PreEvaluationResponse> PreEvaluationResponses
		{
			get
			{
				return this._PreEvaluationResponses;
			}
			set
			{
				this._PreEvaluationResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_PreEvaluationQuestion", Storage="_QuestionType", ThisKey="SubQuestionTypeID", OtherKey="ID", IsForeignKey=true)]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.PreEvaluationQuestions.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationQuestions.Add(this);
						this._SubQuestionTypeID = value.ID;
					}
					else
					{
						this._SubQuestionTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationQuestion = this;
		}
		
		private void detach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationQuestion = null;
		}
		
		private void attach_PreEvaluationResponses(PreEvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationQuestion = this;
		}
		
		private void detach_PreEvaluationResponses(PreEvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreEvaluationSubQuestion")]
	public partial class PreEvaluationSubQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreEvaluationSubQuestionID;
		
		private int _PreEvaluationQuestionID;
		
		private int _PreEvaluationResponseID;
		
		private int _QuestionID;
		
		private int _QuestionOrder;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<PreEvaluationResponse> _PreEvaluationResponse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreEvaluationSubQuestionIDChanging(int value);
    partial void OnPreEvaluationSubQuestionIDChanged();
    partial void OnPreEvaluationQuestionIDChanging(int value);
    partial void OnPreEvaluationQuestionIDChanged();
    partial void OnPreEvaluationResponseIDChanging(int value);
    partial void OnPreEvaluationResponseIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionOrderChanging(int value);
    partial void OnQuestionOrderChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PreEvaluationSubQuestion()
		{
			this._Question = default(EntityRef<Question>);
			this._PreEvaluationResponse = default(EntityRef<PreEvaluationResponse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationSubQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PreEvaluationSubQuestionID
		{
			get
			{
				return this._PreEvaluationSubQuestionID;
			}
			set
			{
				if ((this._PreEvaluationSubQuestionID != value))
				{
					this.OnPreEvaluationSubQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationSubQuestionID = value;
					this.SendPropertyChanged("PreEvaluationSubQuestionID");
					this.OnPreEvaluationSubQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationQuestionID", DbType="Int NOT NULL")]
		public int PreEvaluationQuestionID
		{
			get
			{
				return this._PreEvaluationQuestionID;
			}
			set
			{
				if ((this._PreEvaluationQuestionID != value))
				{
					this.OnPreEvaluationQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationQuestionID = value;
					this.SendPropertyChanged("PreEvaluationQuestionID");
					this.OnPreEvaluationQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationResponseID", DbType="Int NOT NULL")]
		public int PreEvaluationResponseID
		{
			get
			{
				return this._PreEvaluationResponseID;
			}
			set
			{
				if ((this._PreEvaluationResponseID != value))
				{
					if (this._PreEvaluationResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreEvaluationResponseIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationResponseID = value;
					this.SendPropertyChanged("PreEvaluationResponseID");
					this.OnPreEvaluationResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionOrder", DbType="Int NOT NULL")]
		public int QuestionOrder
		{
			get
			{
				return this._QuestionOrder;
			}
			set
			{
				if ((this._QuestionOrder != value))
				{
					this.OnQuestionOrderChanging(value);
					this.SendPropertyChanging();
					this._QuestionOrder = value;
					this.SendPropertyChanged("QuestionOrder");
					this.OnQuestionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_PreEvaluationSubQuestion", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.PreEvaluationSubQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationSubQuestions.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_PreEvaluationSubQuestion", Storage="_PreEvaluationResponse", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID", IsForeignKey=true)]
		public PreEvaluationResponse PreEvaluationResponse
		{
			get
			{
				return this._PreEvaluationResponse.Entity;
			}
			set
			{
				PreEvaluationResponse previousValue = this._PreEvaluationResponse.Entity;
				if (((previousValue != value) 
							|| (this._PreEvaluationResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreEvaluationResponse.Entity = null;
						previousValue.PreEvaluationSubQuestions.Remove(this);
					}
					this._PreEvaluationResponse.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationSubQuestions.Add(this);
						this._PreEvaluationResponseID = value.PreEvaluationResponseID;
					}
					else
					{
						this._PreEvaluationResponseID = default(int);
					}
					this.SendPropertyChanged("PreEvaluationResponse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreEvaluationResponse")]
	public partial class PreEvaluationResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreEvaluationResponseID;
		
		private string _Name;
		
		private string _Description;
		
		private int _PreEvaluationQuestionID;
		
		private bool _RequiresPermits;
		
		private bool _IsEndPoint;
		
		private string _EndPointMessage;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<PreEvaluationResponsePermitSet> _PreEvaluationResponsePermitSets;
		
		private EntitySet<EvaluationPreEvalResponse> _EvaluationPreEvalResponses;
		
		private EntitySet<PreEvaluationSubQuestion> _PreEvaluationSubQuestions;
		
		private EntityRef<PreEvaluationQuestion> _PreEvaluationQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreEvaluationResponseIDChanging(int value);
    partial void OnPreEvaluationResponseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPreEvaluationQuestionIDChanging(int value);
    partial void OnPreEvaluationQuestionIDChanged();
    partial void OnRequiresPermitsChanging(bool value);
    partial void OnRequiresPermitsChanged();
    partial void OnIsEndPointChanging(bool value);
    partial void OnIsEndPointChanged();
    partial void OnEndPointMessageChanging(string value);
    partial void OnEndPointMessageChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public PreEvaluationResponse()
		{
			this._PreEvaluationResponsePermitSets = new EntitySet<PreEvaluationResponsePermitSet>(new Action<PreEvaluationResponsePermitSet>(this.attach_PreEvaluationResponsePermitSets), new Action<PreEvaluationResponsePermitSet>(this.detach_PreEvaluationResponsePermitSets));
			this._EvaluationPreEvalResponses = new EntitySet<EvaluationPreEvalResponse>(new Action<EvaluationPreEvalResponse>(this.attach_EvaluationPreEvalResponses), new Action<EvaluationPreEvalResponse>(this.detach_EvaluationPreEvalResponses));
			this._PreEvaluationSubQuestions = new EntitySet<PreEvaluationSubQuestion>(new Action<PreEvaluationSubQuestion>(this.attach_PreEvaluationSubQuestions), new Action<PreEvaluationSubQuestion>(this.detach_PreEvaluationSubQuestions));
			this._PreEvaluationQuestion = default(EntityRef<PreEvaluationQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PreEvaluationResponseID
		{
			get
			{
				return this._PreEvaluationResponseID;
			}
			set
			{
				if ((this._PreEvaluationResponseID != value))
				{
					this.OnPreEvaluationResponseIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationResponseID = value;
					this.SendPropertyChanged("PreEvaluationResponseID");
					this.OnPreEvaluationResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreEvaluationQuestionID", DbType="Int NOT NULL")]
		public int PreEvaluationQuestionID
		{
			get
			{
				return this._PreEvaluationQuestionID;
			}
			set
			{
				if ((this._PreEvaluationQuestionID != value))
				{
					if (this._PreEvaluationQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreEvaluationQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._PreEvaluationQuestionID = value;
					this.SendPropertyChanged("PreEvaluationQuestionID");
					this.OnPreEvaluationQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiresPermits", DbType="Bit NOT NULL")]
		public bool RequiresPermits
		{
			get
			{
				return this._RequiresPermits;
			}
			set
			{
				if ((this._RequiresPermits != value))
				{
					this.OnRequiresPermitsChanging(value);
					this.SendPropertyChanging();
					this._RequiresPermits = value;
					this.SendPropertyChanged("RequiresPermits");
					this.OnRequiresPermitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEndPoint", DbType="Bit NOT NULL")]
		public bool IsEndPoint
		{
			get
			{
				return this._IsEndPoint;
			}
			set
			{
				if ((this._IsEndPoint != value))
				{
					this.OnIsEndPointChanging(value);
					this.SendPropertyChanging();
					this._IsEndPoint = value;
					this.SendPropertyChanged("IsEndPoint");
					this.OnIsEndPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndPointMessage", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string EndPointMessage
		{
			get
			{
				return this._EndPointMessage;
			}
			set
			{
				if ((this._EndPointMessage != value))
				{
					this.OnEndPointMessageChanging(value);
					this.SendPropertyChanging();
					this._EndPointMessage = value;
					this.SendPropertyChanged("EndPointMessage");
					this.OnEndPointMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_PreEvaluationResponsePermitSet", Storage="_PreEvaluationResponsePermitSets", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID")]
		public EntitySet<PreEvaluationResponsePermitSet> PreEvaluationResponsePermitSets
		{
			get
			{
				return this._PreEvaluationResponsePermitSets;
			}
			set
			{
				this._PreEvaluationResponsePermitSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_EvaluationPreEvalResponse", Storage="_EvaluationPreEvalResponses", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID")]
		public EntitySet<EvaluationPreEvalResponse> EvaluationPreEvalResponses
		{
			get
			{
				return this._EvaluationPreEvalResponses;
			}
			set
			{
				this._EvaluationPreEvalResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationResponse_PreEvaluationSubQuestion", Storage="_PreEvaluationSubQuestions", ThisKey="PreEvaluationResponseID", OtherKey="PreEvaluationResponseID")]
		public EntitySet<PreEvaluationSubQuestion> PreEvaluationSubQuestions
		{
			get
			{
				return this._PreEvaluationSubQuestions;
			}
			set
			{
				this._PreEvaluationSubQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PreEvaluationQuestion_PreEvaluationResponse", Storage="_PreEvaluationQuestion", ThisKey="PreEvaluationQuestionID", OtherKey="PreEvaluationQuestionID", IsForeignKey=true)]
		public PreEvaluationQuestion PreEvaluationQuestion
		{
			get
			{
				return this._PreEvaluationQuestion.Entity;
			}
			set
			{
				PreEvaluationQuestion previousValue = this._PreEvaluationQuestion.Entity;
				if (((previousValue != value) 
							|| (this._PreEvaluationQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreEvaluationQuestion.Entity = null;
						previousValue.PreEvaluationResponses.Remove(this);
					}
					this._PreEvaluationQuestion.Entity = value;
					if ((value != null))
					{
						value.PreEvaluationResponses.Add(this);
						this._PreEvaluationQuestionID = value.PreEvaluationQuestionID;
					}
					else
					{
						this._PreEvaluationQuestionID = default(int);
					}
					this.SendPropertyChanged("PreEvaluationQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = this;
		}
		
		private void detach_PreEvaluationResponsePermitSets(PreEvaluationResponsePermitSet entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = null;
		}
		
		private void attach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = this;
		}
		
		private void detach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = null;
		}
		
		private void attach_PreEvaluationSubQuestions(PreEvaluationSubQuestion entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = this;
		}
		
		private void detach_PreEvaluationSubQuestions(PreEvaluationSubQuestion entity)
		{
			this.SendPropertyChanging();
			entity.PreEvaluationResponse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationID;
		
		private string _Name;
		
		private string _Description;
		
		private int _StatusID;
		
		private int _UserID;
		
		private int _TechnologyID;
		
		private int _LocationID;
		
		private int _CapacityID;
		
		private int _FederalID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntitySet<EvaluationPreEvalResponse> _EvaluationPreEvalResponses;
		
		private EntitySet<EvaluationResponse> _EvaluationResponses;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Technology> _Technology;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationIDChanging(int value);
    partial void OnEvaluationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnCapacityIDChanging(int value);
    partial void OnCapacityIDChanged();
    partial void OnFederalIDChanging(int value);
    partial void OnFederalIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Evaluation()
		{
			this._EvaluationPreEvalResponses = new EntitySet<EvaluationPreEvalResponse>(new Action<EvaluationPreEvalResponse>(this.attach_EvaluationPreEvalResponses), new Action<EvaluationPreEvalResponse>(this.detach_EvaluationPreEvalResponses));
			this._EvaluationResponses = new EntitySet<EvaluationResponse>(new Action<EvaluationResponse>(this.attach_EvaluationResponses), new Action<EvaluationResponse>(this.detach_EvaluationResponses));
			this._Location = default(EntityRef<Location>);
			this._Technology = default(EntityRef<Technology>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationID
		{
			get
			{
				return this._EvaluationID;
			}
			set
			{
				if ((this._EvaluationID != value))
				{
					this.OnEvaluationIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationID = value;
					this.SendPropertyChanged("EvaluationID");
					this.OnEvaluationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapacityID", DbType="Int NOT NULL")]
		public int CapacityID
		{
			get
			{
				return this._CapacityID;
			}
			set
			{
				if ((this._CapacityID != value))
				{
					this.OnCapacityIDChanging(value);
					this.SendPropertyChanging();
					this._CapacityID = value;
					this.SendPropertyChanged("CapacityID");
					this.OnCapacityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FederalID", DbType="Int NOT NULL")]
		public int FederalID
		{
			get
			{
				return this._FederalID;
			}
			set
			{
				if ((this._FederalID != value))
				{
					this.OnFederalIDChanging(value);
					this.SendPropertyChanging();
					this._FederalID = value;
					this.SendPropertyChanged("FederalID");
					this.OnFederalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationPreEvalResponse", Storage="_EvaluationPreEvalResponses", ThisKey="EvaluationID", OtherKey="EvaluationID")]
		public EntitySet<EvaluationPreEvalResponse> EvaluationPreEvalResponses
		{
			get
			{
				return this._EvaluationPreEvalResponses;
			}
			set
			{
				this._EvaluationPreEvalResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationResponse", Storage="_EvaluationResponses", ThisKey="EvaluationID", OtherKey="EvaluationID")]
		public EntitySet<EvaluationResponse> EvaluationResponses
		{
			get
			{
				return this._EvaluationResponses;
			}
			set
			{
				this._EvaluationResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Evaluation", Storage="_Location", ThisKey="LocationID", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._LocationID = value.ID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_Evaluation", Storage="_Technology", ThisKey="TechnologyID", OtherKey="ID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._TechnologyID = value.ID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Evaluation", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_EvaluationPreEvalResponses(EvaluationPreEvalResponse entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_EvaluationResponses(EvaluationResponse entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationResponse")]
	public partial class EvaluationResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationResponseID;
		
		private int _EvaluationID;
		
		private int _QuestionID;
		
		private int _ResponseID;
		
		private int _PageNo;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private string _Note;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Response> _Response;
		
		private EntityRef<Response> _Response1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationResponseIDChanging(int value);
    partial void OnEvaluationResponseIDChanged();
    partial void OnEvaluationIDChanging(int value);
    partial void OnEvaluationIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnResponseIDChanging(int value);
    partial void OnResponseIDChanged();
    partial void OnPageNoChanging(int value);
    partial void OnPageNoChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EvaluationResponse()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Question = default(EntityRef<Question>);
			this._Response = default(EntityRef<Response>);
			this._Response1 = default(EntityRef<Response>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationResponseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationResponseID
		{
			get
			{
				return this._EvaluationResponseID;
			}
			set
			{
				if ((this._EvaluationResponseID != value))
				{
					this.OnEvaluationResponseIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationResponseID = value;
					this.SendPropertyChanged("EvaluationResponseID");
					this.OnEvaluationResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationID", DbType="Int NOT NULL")]
		public int EvaluationID
		{
			get
			{
				return this._EvaluationID;
			}
			set
			{
				if ((this._EvaluationID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIDChanging(value);
					this.SendPropertyChanging();
					this._EvaluationID = value;
					this.SendPropertyChanged("EvaluationID");
					this.OnEvaluationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseID", DbType="Int NOT NULL")]
		public int ResponseID
		{
			get
			{
				return this._ResponseID;
			}
			set
			{
				if ((this._ResponseID != value))
				{
					if ((this._Response.HasLoadedOrAssignedValue || this._Response1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponseIDChanging(value);
					this.SendPropertyChanging();
					this._ResponseID = value;
					this.SendPropertyChanged("ResponseID");
					this.OnResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageNo", DbType="Int NOT NULL")]
		public int PageNo
		{
			get
			{
				return this._PageNo;
			}
			set
			{
				if ((this._PageNo != value))
				{
					this.OnPageNoChanging(value);
					this.SendPropertyChanging();
					this._PageNo = value;
					this.SendPropertyChanged("PageNo");
					this.OnPageNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="nvarchar(max)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationResponse", Storage="_Evaluation", ThisKey="EvaluationID", OtherKey="EvaluationID", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.EvaluationResponses.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.EvaluationResponses.Add(this);
						this._EvaluationID = value.EvaluationID;
					}
					else
					{
						this._EvaluationID = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_EvaluationResponse", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.EvaluationResponses.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.EvaluationResponses.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_EvaluationResponse", Storage="_Response", ThisKey="ResponseID", OtherKey="ResponseID", IsForeignKey=true)]
		public Response Response
		{
			get
			{
				return this._Response.Entity;
			}
			set
			{
				Response previousValue = this._Response.Entity;
				if (((previousValue != value) 
							|| (this._Response.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Response.Entity = null;
						previousValue.EvaluationResponses.Remove(this);
					}
					this._Response.Entity = value;
					if ((value != null))
					{
						value.EvaluationResponses.Add(this);
						this._ResponseID = value.ResponseID;
					}
					else
					{
						this._ResponseID = default(int);
					}
					this.SendPropertyChanged("Response");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Response_EvaluationResponse1", Storage="_Response1", ThisKey="ResponseID", OtherKey="ResponseID", IsForeignKey=true)]
		public Response Response1
		{
			get
			{
				return this._Response1.Entity;
			}
			set
			{
				Response previousValue = this._Response1.Entity;
				if (((previousValue != value) 
							|| (this._Response1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Response1.Entity = null;
						previousValue.EvaluationResponses1.Remove(this);
					}
					this._Response1.Entity = value;
					if ((value != null))
					{
						value.EvaluationResponses1.Add(this);
						this._ResponseID = value.ResponseID;
					}
					else
					{
						this._ResponseID = default(int);
					}
					this.SendPropertyChanged("Response1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
